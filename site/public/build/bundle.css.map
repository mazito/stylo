{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Button.svelte",
    "../../Label.svelte",
    "../../Text.svelte",
    "../../Box.svelte",
    "../../Overlay.svelte",
    "../../Page.svelte",
    "../../Panel.svelte",
    "../../Popover.svelte",
    "../../Target.svelte"
  ],
  "sourcesContent": [
    "{#if show}\n  <button\n    on:click\n    class=\"button { css && css.classes() }\"\n    style={ css && css.styled() }>\n    <slot></slot>\n  </button>\n{/if}\n\n<style>\n.button {\n  display: inline-block;\n  box-sizing: border-box;\n  font-size: 100%;\n  font-weight: normal;\n  font-style: normal;\n  line-height: 1em;\n  word-wrap: normal;\n  white-space: nowrap;\n}\n</style>\n\n<svelte:window bind:innerWidth={vw} />\n\n<script>\n  import { Css } from '../theme';  \n  \n  export let \n    show = true;\n  \n  let \n    vw = 0,\n    css = null;\n  \n  $: if (vw) {\n    css = Css($$props)\n      .shorthand(['xs','sm','nm','md','lg','xl'], 'font-size')\n      .shorthand(['normal','bold','thin'], 'font-weight')\n      .shorthand(['center','left','right','justify'], 'text-align')\n      .shorthand(['nowrap'], 'white-space')\n      .shorthand(['middle','top','bottom'], 'vertical-alignment')\n    show = css.visible(show);\n  }\n</script>",
    "<!--\nA block of text inside a Box or Panel. \n\nIt is ALLWAY 'inline-block' so margins and padding are fully consistent.\n\nShorthand properties:\n\n- `xs`,`sm`,`nm`,`md`,`lg`,`xl`,`xxl` for setting `font-size` using the Theme values.\n\n- `thin`,`normal`,`bold`: for setting `font-weight` using the Theme values.\n\n- `italic`: for setting `font-style` using the Theme values. Default is 'normal'.\n\n- `underline`:\n\n- `center`, `left`, `right`: for `text-align` inside the block.\n\n- `middle`,`top`,`bottom`: for `vertical-alignment` inside it's container.\n\n- `nowrap`: sets 'white-space=nowrap' and 'overflow=hidden' to avoid exceeding the block width.\n\n- `hyphens`: will allow hyphenation (if possible at all in the language).\n\nOther special properties:\n\n- `family`: not included !\n\n- `size`: for a measured (\"10px\", etc..) `font-size`of the given text.  \n\n- `weight`: for a numeric (\"100\", \"200\", etc...) `font-weight`of the given text. \n\n- `spacing`: for `line-height` of the given text. Can use one of the Theme constants.\n\n- `m` and `p` and it's variants: for `margin` and `padding` as usual.\n\n- `w`,`maxw`,`h`,`maxh`,`color`,`background`: as usual. \n\n- `rotate` property ??? for rotated text ?\n\n,``,``,``,``,``,``,\n-->\n<div\n  class=\"text { css.classes() }\"\n  style={ css.styled() }>\n  <slot></slot>\n</div>\n\n<style>\n.text {\n  display: inline-block;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  font-weight: normal;\n  font-style: normal;\n  line-height: 1em;\n  word-wrap: normal; /* or ? break-word; */\n  white-space: normal;\n  hyphens: inherit; /* from the global.css setting */\n}\n</style>\n\n<script>\n  import { Css } from '../theme';\n  \n  let css = Css($$props)\n    .shorthand(['xs','sm','nm','md','lg','xl','h2', 'h1'], 'font-size')\n    .shorthand(['italic','underline'], 'font-style')\n    .shorthand(['normal','bold','thin'], 'font-weight')\n    .shorthand(['center','left','right','justify'], 'text-align')\n    .shorthand(['nowrap'], 'white-space')\n    .shorthand(['middle','top','bottom'], 'vertical-alignment')\n</script>",
    "<!--\nA block of text inside a Box or Panel. \n\nIt is ALLWAY 'inline-block' so margins and padding are fully consistent.\n\nShorthand properties:\n\n- `xs`,`sm`,`nm`,`md`,`lg`,`xl`,`xxl` for setting `font-size` using the Theme values.\n\n- `thin`,`normal`,`bold`: for setting `font-weight` using the Theme values.\n\n- `italic`: for setting `font-style` using the Theme values. Default is 'normal'.\n\n- `underline`:\n\n- `center`, `left`, `right`: for `text-align` inside the block.\n\n- `middle`,`top`,`bottom`: for `vertical-alignment` inside it's container.\n\n- `nowrap`: sets 'white-space=nowrap' and 'overflow=hidden' to avoid exceeding the block width.\n\n- `hyphens`: will allow hyphenation (if possible at all in the language).\n\nOther special properties:\n\n- `family`: not included !\n\n- `size`: for a measured (\"10px\", etc..) `font-size`of the given text.  \n\n- `weight`: for a numeric (\"100\", \"200\", etc...) `font-weight`of the given text. \n\n- `spacing`: for `line-height` of the given text. Can use one of the Theme constants.\n\n- `m` and `p` and it's variants: for `margin` and `padding` as usual.\n\n- `w`,`maxw`,`h`,`maxh`,`color`,`background`: as usual. \n\n- `rotate` property ??? for rotated text ?\n\n,``,``,``,``,``,``,\n-->\n<div\n  class=\"text { css.classes() }\"\n  style={ css.styled() }>\n  <slot></slot>\n</div>\n\n<style>\n.text {\n  display: inline;\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  font-weight: normal;\n  font-style: normal;\n  line-height: 1em;\n  word-wrap: normal; /* or ? break-word; */\n  white-space: normal;\n  hyphens: inherit; /* from the global.css setting */\n}\n</style>\n\n<script>\n  import { Css } from '../theme';\n  \n  let css = Css($$props)\n    .shorthand(['xs','sm','nm','md','lg','xl','h2', 'h1'], 'font-size')\n    .shorthand(['italic','underline'], 'font-style')\n    .shorthand(['normal','bold','thin'], 'font-weight')\n    .shorthand(['center','left','right','justify'], 'text-align')\n    .shorthand(['nowrap'], 'white-space')\n    .shorthand(['middle','top','bottom'], 'vertical-alignment')\n</script>",
    "{#if show}\n  <div \n    on:click\n    class=\"box { css && css.classes() }\"\n    style={ css && css.styled() }\n    >\n    <slot></slot>\n  </div>\n{/if}\n\n<style>\n.box {\n  box-sizing: border-box;\n  display: inline-block;\n  position: relative;\n  padding: 0;\n  margin: 0px; /* FIX porque si no quedan espacios entre Boxes */\n  overflow: hidden;\n  z-index: 1;\n}\n</style>\n\n<svelte:window bind:innerWidth={vw} />\n\n<script>\n  import { Css } from '../theme';\n  \n  export let \n    show = true;\n\n  let \n    vw = 0,\n    css = null;\n    \n  $: if (vw) {\n    css = Css($$props);\n    show = css.visible(show);\n    console.log(\"Box\", css)\n  }\n</script>",
    "{#if show}\n<div>\n  <div \n    class=\"overlay { css && css.classes() }\" \n    transition:fade=\"{{delay: 20, duration: 300}}\"\n    >\n  </div>\n  <div \n    on:click|self={ ()=>{ show = !modal ? false : show ; }}\n    class=\"content\" \n    transition:fade=\"{{delay: 150, duration: 300}}\"\n    >\n    <div class=\"{ centered ? ' centered': '' }\">\n      <slot></slot>\n    </div> \n  </div>\n</div>\n{/if}\n\n<style>\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom:0;\n  box-sizing: border-box;\n  padding: 0;\n  margin:0;\n  z-index: 1;\n  overflow: hidden;\n  background-color: #666;\n  opacity: 0.5;\n  /* debug */\n  --border: 1px dotted red;\n}\n\n.overlay.transparent {\n  background-color: transparent !important;\n  opacity: 0 !important;\n}\n\n.content {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom:0;\n  box-sizing: border-box;\n  padding: 0;\n  margin:0;\n  z-index: 2;\n  overflow: auto;\n}\n\n.centered {\n  margin: 0;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n}\n</style>\n\n<svelte:window bind:innerWidth={vw} />\n\n<script>\n  import { Css } from '../theme';\n  \n  export let \n    show = false,\n    modal = false,\n    centered = true;\n\n  let \n    vw = 0,\n    css = null;\n    \n  $: if (vw) {\n    css = Css($$props);\n    show = css.visible(show);\n  }\n</script>",
    "{#if show}\n  <div \n    class=\"page { css && css.classes() }\"\n    style={ css && css.styled() }\n    >\n    <slot></slot>\n  </div>\n{/if}\n\n<style>\n.page {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom:0;\n  box-sizing: border-box;\n  padding: 0;\n  margin:0;\n  z-index: 0;\n  overflow: auto;\n}\n\n:global(.wireframe) {\n  border: 1px dashed #FF0000;\n  margin: -1px; /* FIX to adjust for the border width */\n}\n\n:global(.hover:hover) {\n  background-color: #eeeeee !important;\n  color: #000 !important;\n}\n</style>\n\n<svelte:window bind:innerWidth={vw} />\n\n<script>\n  import { Css } from '../theme';\n  \n  export let \n    show = true;\n  \n  let \n    vw = 0,\n    css = null;\n  \n  $: if (vw) {\n    css = Css($$props);\n    show = css.visible(show);\n    console.log(\"Page\", css)\n  }\n</script>\n",
    "{#if show}\n  <div \n    on:click \n    class=\"panel { css && css.classes() }\"\n    style={ css && css.styled() }\n    >\n    <slot></slot>\n  </div>\n{/if}\n\n<style>\n.panel {\n  box-sizing: border-box;\n  display: block;\n  position: relative;\n  padding: 0;\n  margin: 0px; \n  overflow: auto;\n  z-index: 0;\n  /* debug */\n  background-color: transparent;\n}\n\n.flexed {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  align-content: stretch;\n}\n</style>\n\n<svelte:window bind:innerWidth={vw} />\n\n<script>\n  import { Css } from '../theme';\n  \n  export let \n    show = true;\n\n  let \n    vw = 0,\n    css = null;\n    \n  $: if (vw) {\n    css = Css($$props);\n    show = css.visible(show);\n    console.log(\"$ Panel vw=\", vw, show)\n  }\n</script>",
    "<!--\n  This is the basic Popover building block\n  on which other Popovers can be build.\n\n  Notes: ideally should not use any styling, as it simply is\n  a container for whatever you will be putting inside it. \n  \n  All styling must be done in the contained elements.\n\n  API:\n\n    show = false,\n    anchor = null,\n    w = \"18\", \n    x = 0, \n    y = 0,\n    position = \"right\"  \n-->    \n<div \n  id={id}\n  on:click={(ev) => ev.stopPropagation()}\n  >\n  {#if !!anchor && anchor.on && $activePop===id}\n    <div \n      bind:clientWidth={cw} \n      bind:clientHeight={ch}    \n      class=\"popover { wireframe ? ' wireframe' : '' }\"\n      style={ css.styled() } \n      >\n      <slot></slot>\n    </div>\n  {/if}\n</div>\n\n\n<style>\n.popover {\n  display: block;\n  position: fixed;\n  z-index: 100 !important;\n}\n</style>\n\n\n<svelte:window on:click={() => { \n  console.log(\"outside\");\n  //show=false; \n  if (anchor) anchor.on=false; \n}}/>\n\n\n<script context=\"module\">\n  import { writable } from 'svelte/store'\n\n  export let activePop = writable(null);\n\n  activePop.set(null);\n\n  console.log(\"Active Pop\")\n</script>\n\n<script>\n  import { onMount } from 'svelte'\n  import { Css, Theme } from '../theme'\n\n  export let\n    show = false,\n    anchor = null,\n    w = \"18\", \n    x = 0, y = 0,\n    position = \"right\";  // aligns right popover with right anchor \n\n  let\n    //selfie = null,\n    id = randid(),\n    styled,\n    cw, ch, // client width and height\n    wireframe = Theme.wireframes(),\n    css = Css($$props);\n\n  // create anchor if it does not exist\n  // assigning it the show value\n  if (!anchor && !!show)\n    anchor = { on: show };\n\n  $: if (anchor && !!anchor.on) {\n\n      console.log(\"$ Popover changed\", id, anchor.on, cw)\n\n      // get Window container rect for limiting Pop position\n      let body = document.getElementsByTagName('body')[0]\n      let ww = body.clientWidth;\n\n      if (anchor) {\n        // if using a 'anchor' must calculate\n        // the position relative to this anchor\n        x = position === 'right' \n            ? anchor.bounds.right - cw \n            : anchor.bounds.left ;\n\n        y = anchor.bounds.bottom ;\n\n        console.log(\"$ Popover y,bounds.bottom=\", y, anchor.bounds.bottom)\n\n        // reposition correctly if \n        // out of the screen borders\n        if (x+cw >= ww) x = ww - cw - 1;\n        if (x <= 0) x = 1;\n      }\n\n      // set the 'style' BEFORE putting it visible\n      styled = 'left:'+x+'px;'+'top:'+y+'px;'\n\n      // show = anchor.on; // now we can activate it !\n\n      // and informe the other pops that \n      // we are now the only active one !\n      activePop.set(id) ;\n\n      console.log(\"$ Popover active\", id, anchor.on, x, y)\n  }\n\n  activePop.subscribe((t) => {\n    // if it's not my ID this means that some \n    // other pop is now active and so we must go !\n    if (t && t !== id && anchor && !!anchor.on) {\n       //show = false;\n       anchor.on = false ; \n    }\n  })\n\n  function randid() {\n    // Returns a randomized ID of the form 'idXXXX'\n    // where X is a Hexa digit (0..F)\n    function randint(min, max) {\n      return parseInt(min + Math.floor((max - min) * Math.random()))\n    }\n    return 'id'+(randint(0, 65535).toString(16))\n  }\n</script>\n",
    "{#if show}\n  <div \n    on:click={ handleIt }\n    bind:this={ me }\n    class=\"target { css && css.classes() }\"\n    style={ css && css.styled() }\n    >\n    <slot></slot>\n  </div>\n{/if}\n\n<style>\n.target {\n  box-sizing: border-box !important;\n  display: inline-block;\n  margin: 0;\n  padding: 0;\n  cursor: pointer;\n}\n</style>\n\n<svelte:window bind:innerWidth={vw} />\n\n<script>\n  import { Css } from '../theme';  \n  \n  export let \n    anchor; // used to toggle Popover on/off\n  \n  let \n    me = null,\n    state = false, \n    vw = 0,\n    show = true,\n    css = null;\n\n  // initialize Anchor if undefined or empty\n  anchor = anchor || {\n    on: false,\n    x: 0, y:0,\n    bounds: { left:0, right: 0, top: 0, bottom:0 }\n  };\n\n  $: if (vw) {\n    css = Css($$props);\n    show = css.visible(show);\n  }\n\n  function handleIt(ev) {\n    /**\n     * Toggles the On/Off state and \n     * @returns the state and coords \n     * in the binded @anchor object\n     */\n    anchor.on = !anchor.on; // toggle On/Off\n    anchor.x=ev.pageX\n    anchor.y=ev.pageY\n    anchor.bounds = me.getBoundingClientRect();\n\n    console.log(\"Target on,me,bounds=\", anchor.on, me, anchor.bounds)\n    ev.stopPropagation();\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}